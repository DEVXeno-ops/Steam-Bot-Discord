/**
 * SteamThailand Bot - ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ xeno (‡∏£‡∏¥‡∏ô)
 * ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå
 * ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ / ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 * ‚úÖ v1.0.2
 */

require('dotenv').config(); // ‡πÇ‡∏´‡∏•‡∏î .env file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö token, config ‡∏•‡∏±‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ

const {
  Client,
  IntentsBitField,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
} = require('discord.js');
const { registerCommands } = require('./commands');
const { loadData, saveData } = require('./data');
const { createEmbed, createDonationGUI } = require('./embeds');
const { isValidSteamID64, isValidTradeLink, sanitizeInput, logToChannel } = require('./utils');
const cron = require('node-cron');

const config = {
  discordToken: process.env.DISCORD_TOKEN,
  logChannelId: process.env.LOG_CHANNEL_ID,
  adminRoleId: process.env.ADMIN_ROLE_ID,
  tradeOfferLinks: {
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô object ‡∏ß‡πà‡∏≤‡∏á ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ config ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config ‡πÅ‡∏¢‡∏Å
  },
  maxBansPerDay: 5,
};

const client = new Client({
  intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMessages,
    IntentsBitField.Flags.MessageContent,
    IntentsBitField.Flags.DirectMessages,
  ],
  partials: ['CHANNEL'], // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö DM ‡πÅ‡∏ö‡∏ö partials
});

let blacklist = [];
let donationHistory = [];
const userBanCounts = new Map();

/**
 * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï ban count ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô (‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á server)
 * ‡πÉ‡∏ä‡πâ cron ‡πÅ‡∏ó‡∏ô setInterval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
 */
cron.schedule('0 0 * * *', () => {
  userBanCounts.clear();
  console.log('[SYSTEM] ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (cron)');
});

client.once('ready', async () => {
  try {
    console.log(`[SYSTEM] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${client.user.tag} (${new Date().toLocaleString('th-TH')})`);
    console.log('[SYSTEM] SteamThailand Bot ‡πÇ‡∏î‡∏¢ xeno (‡∏£‡∏¥‡∏ô) | ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏¢ | ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏®‡∏∂‡∏Å‡∏©‡∏≤ / ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• blacklist ‡πÅ‡∏•‡∏∞ donation ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå / DB
    const data = await loadData();
    blacklist = data.blacklist || [];
    donationHistory = data.donationHistory || [];
    console.log('[SYSTEM] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash Commands
    await registerCommands(client);
    console.log('[SYSTEM] ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } catch (error) {
    console.error('[ERROR] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô ready event:', error);
  }
});

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ interaction ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
 */
client.on('interactionCreate', async (interaction) => {
  try {
    if (!interaction.isCommand() && !interaction.isStringSelectMenu() && !interaction.isButton()) return;

    const userId = interaction.user.id;

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å (slash commands)
    if (interaction.isCommand()) {
      const { commandName, options, member } = interaction;
      await interaction.deferReply({ ephemeral: true });

      console.log(`[COMMAND] ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${interaction.user.tag} ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: /${commandName}`);

      switch (commandName) {
        case 'setup': {
          if (!member.roles.cache.has(config.adminRoleId)) {
            console.log(`[PERMISSION] ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${interaction.user.tag} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á setup`);
            return interaction.editReply({ content: '‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!' });
          }

          const subcommand = options.getSubcommand();

          if (subcommand === 'donate') {
            const recipient = sanitizeInput(options.getString('recipient'));
            const tradeLink = sanitizeInput(options.getString('tradelink'));

            if (!recipient || !tradeLink) {
              console.log(`[SETUP DONATE] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${interaction.user.tag}`);
              return interaction.editReply({ content: '‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
            }

            if (!isValidTradeLink(tradeLink)) {
              console.log(`[SETUP DONATE] ‡∏•‡∏¥‡∏á‡∏Å‡πå trade offer ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${interaction.user.tag}`);
              return interaction.editReply({ content: '‚ùå ‡∏•‡∏¥‡∏á‡∏Å‡πå trade offer ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
            }

            config.tradeOfferLinks[recipient] = { link: tradeLink, emoji: 'üéÅ' };

            const embed = createEmbed('donate', 'success', { recipient, link: tradeLink });
            await logToChannel(client, config.logChannelId, embed);
            await interaction.user.send({ embeds: [embed] }).catch(() => console.log('[DM ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM'));

            console.log(`[SETUP DONATE] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ: ${recipient} ‡πÇ‡∏î‡∏¢ ${interaction.user.tag}`);

            return interaction.editReply({ content: '‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
          }

          if (subcommand === 'removedonate') {
            const recipient = sanitizeInput(options.getString('recipient'));
            if (!config.tradeOfferLinks[recipient]) {
              console.log(`[REMOVE DONATE] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ${recipient} ‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${interaction.user.tag}`);
              return interaction.editReply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ${recipient}` });
            }

            delete config.tradeOfferLinks[recipient];

            const embed = createEmbed('removedonate', 'success', { recipient });
            await logToChannel(client, config.logChannelId, embed);
            await interaction.user.send({ embeds: [embed] }).catch(() => console.log('[DM ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM'));

            console.log(`[REMOVE DONATE] ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ: ${recipient} ‡πÇ‡∏î‡∏¢ ${interaction.user.tag}`);

            return interaction.editReply({ content: `‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ ${recipient} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!` });
          }
          break;
        }

        case 'blacklist': {
          const subcommand = options.getSubcommand?.() || 'add';

          if (subcommand === 'add') {
            const steamId = sanitizeInput(options.getString('steamid'));
            const reason = sanitizeInput(options.getString('reason'));

            if (!isValidSteamID64(steamId) || !reason) {
              return interaction.editReply({ content: '‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ SteamID64 ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
            }

            const todayKey = `${userId}-${new Date().toDateString()}`;
            const banCount = (userBanCounts.get(todayKey) || 0) + 1;
            if (banCount > config.maxBansPerDay) {
              return interaction.editReply({ content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ö‡∏ô‡∏Ñ‡∏£‡∏ö ${config.maxBansPerDay} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ` });
            }
            userBanCounts.set(todayKey, banCount);

            const confirmButton = new ButtonBuilder()
              .setCustomId(`confirm_ban_${steamId}_${Buffer.from(reason).toString('base64')}`)
              .setLabel('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')
              .setStyle(ButtonStyle.Success);
            const cancelButton = new ButtonBuilder()
              .setCustomId('cancel_ban')
              .setLabel('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
              .setStyle(ButtonStyle.Danger);

            return interaction.editReply({
              content: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô SteamID **${steamId}** ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
              components: [new ActionRowBuilder().addComponents(confirmButton, cancelButton)],
            });
          }

          if (subcommand === 'remove') {
            const steamId = sanitizeInput(options.getString('steamid'));
            if (!isValidSteamID64(steamId)) {
              return interaction.editReply({ content: '‚ùå SteamID64 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
            }
            const index = blacklist.findIndex((e) => e.steamId === steamId);
            if (index === -1) {
              return interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SteamID ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥' });
            }

            const confirmButton = new ButtonBuilder()
              .setCustomId(`confirm_unban_${steamId}`)
              .setLabel('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö')
              .setStyle(ButtonStyle.Success);
            const cancelButton = new ButtonBuilder()
              .setCustomId('cancel_unban')
              .setLabel('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
              .setStyle(ButtonStyle.Danger);

            return interaction.editReply({
              content: `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö SteamID **${steamId}** ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥ ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
              components: [new ActionRowBuilder().addComponents(confirmButton, cancelButton)],
            });
          }
          break;
        }

        case 'check': {
          const steamId = sanitizeInput(options.getString('steamid'));
          if (!isValidSteamID64(steamId)) {
            return interaction.editReply({ content: '‚ùå SteamID64 ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 17 ‡∏´‡∏•‡∏±‡∏Å' });
          }

          const found = blacklist.find((e) => e.steamId === steamId);
          if (!found) {
            return interaction.editReply({ content: '‚úÖ SteamID ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥' });
          }

          const embed = createEmbed('blacklist', 'success', { steamId: found.steamId, reason: found.reason });
          return interaction.editReply({ embeds: [embed] });
        }

        case 'donate': {
          if (Object.keys(config.tradeOfferLinks).length === 0) {
            return interaction.editReply({ content: '‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /setup donate ‡∏Å‡πà‡∏≠‡∏ô' });
          }
          const { embed, row } = createDonationGUI(config.tradeOfferLinks);
          return interaction.editReply({ embeds: [embed], components: [row] });
        }

        case 'history': {
          const embed = createEmbed('history', 'success', { blacklist });
          return interaction.editReply({ embeds: [embed] });
        }

        case 'donationhistory': {
          const embed = createEmbed('donationhistory', 'success', { donationHistory });
          return interaction.editReply({ embeds: [embed] });
        }

        default:
          return interaction.editReply({ content: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      }
    }

    // Handle select menus
    if (interaction.isStringSelectMenu() && interaction.customId === 'donate_select') {
      await interaction.deferUpdate();

      const recipient = interaction.values[0];
      const data = config.tradeOfferLinks[recipient];

      if (!data) {
        return interaction.editReply({ content: '‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', components: [] });
      }

      const embed = createEmbed('donate', 'success', { recipient, link: data.link, emoji: data.emoji });

      // ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ user
      await interaction.user.send({ embeds: [embed] }).catch(() => console.log('[DM ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM'));

      // ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô channel interaction ‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á DM ‡πÅ‡∏•‡πâ‡∏ß
      await interaction.editReply({ content: '‚úÖ ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á DM ‡πÅ‡∏•‡πâ‡∏ß', embeds: [], components: [] });

      // Log ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
      await logToChannel(client, config.logChannelId, createEmbed('donationlog', 'success', { userTag: interaction.user.tag, recipient }));

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ
      donationHistory.push({ userId, username: interaction.user.tag, recipient, timestamp: Date.now() });
      await saveData({ blacklist, donationHistory });
    }

    // Handle buttons
    if (interaction.isButton()) {
      await interaction.deferUpdate();

      if (interaction.customId.startsWith('confirm_ban_')) {
        const parts = interaction.customId.split('_');
        if (parts.length < 4) return interaction.editReply({ content: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', components: [] });

        const steamId = parts[2];
        const reason = Buffer.from(parts.slice(3).join('_'), 'base64').toString('utf-8');

        if (blacklist.some((e) => e.steamId === steamId)) {
          return interaction.editReply({ content: '‚ùå SteamID ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß', components: [] });
        }

        blacklist.push({ steamId, timestamp: Date.now(), reason });
        await saveData({ blacklist, donationHistory });

        const embed = createEmbed('blacklist', 'success', { steamId, reason });
        await logToChannel(client, config.logChannelId, embed);
        await interaction.user.send({ embeds: [embed] }).catch(() => console.log('[DM ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM'));

        return interaction.editReply({ content: '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', components: [] });
      }

      if (interaction.customId === 'cancel_ban') {
        return interaction.editReply({ content: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô', components: [] });
      }

      if (interaction.customId.startsWith('confirm_unban_')) {
        const steamId = interaction.customId.replace('confirm_unban_', '');
        const index = blacklist.findIndex((e) => e.steamId === steamId);
        if (index === -1) {
          return interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SteamID ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥', components: [] });
        }

        blacklist.splice(index, 1);
        await saveData({ blacklist, donationHistory });

        const embed = createEmbed('unban', 'success', { steamId });
        await logToChannel(client, config.logChannelId, embed);
        await interaction.user.send({ embeds: [embed] }).catch(() => console.log('[DM ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM'));

        return interaction.editReply({ content: `‚úÖ ‡∏•‡∏ö SteamID ${steamId} ‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`, components: [] });
      }

      if (interaction.customId === 'cancel_unban') {
        return interaction.editReply({ content: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥', components: [] });
      }
    }
  } catch (error) {
    console.error('[ERROR] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô interactionCreate:', error);
    if (interaction.deferred || interaction.replied) {
      await interaction.editReply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' }).catch(() => {});
    } else {
      await interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral: true }).catch(() => {});
    }
  }
});

process.on('uncaughtException', (err) => {
  console.error('[FATAL] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏à‡∏±‡∏ö‡∏ï‡∏±‡∏ß (uncaughtException):', err);
});

process.on('unhandledRejection', (err) => {
  console.error('[FATAL] Promise ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏ö error (unhandledRejection):', err);
});

client.login(config.discordToken).catch((err) => console.error('[ERROR] ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô:', err));
