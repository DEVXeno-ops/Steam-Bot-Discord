/**
 * SteamThailand Bot - ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ xeno (‡∏£‡∏¥‡∏ô)
 * ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÉ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå
 * ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ / ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
 */

const { Client, IntentsBitField, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { registerCommands } = require('./commands');
const { loadData, saveData } = require('./data');
const { createEmbed, createDonationGUI } = require('./embeds');
const { isValidSteamID64, isValidTradeLink, sanitizeInput, logToChannel } = require('./utils');

const config = {
    discordToken: '', // ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏ú‡∏¢ token ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞!
    logChannelId: '',
    adminRoleId: '',
    tradeOfferLinks: {
        '‡∏ä‡∏∑‡πà‡∏≠1': { link: 'https://steamcommunity.com/tradeoffer', emoji: 'üéÆ' },
        '‡∏ä‡∏∑‡πà‡∏≠2': { link: 'https://steamcommunity.com/tradeoffer', emoji: 'üåü' },
        '‡∏ä‡∏∑‡πà‡∏≠3': { link: 'https://steamcommunity.com/tradeoffer', emoji: 'üåü' },
        '‡∏ä‡∏∑‡πà‡∏≠4': { link: 'https://steamcommunity.com/tradeoffer', emoji: 'üåü' },
        '‡∏ä‡∏∑‡πà‡∏≠5': { link: 'https://steamcommunity.com/tradeoffer', emoji: 'üåü' },
        '‡∏ä‡∏∑‡πà‡∏≠6': { link: 'https://steamcommunity.com/tradeoffer', emoji: 'üåü' }
    },
    maxBansPerDay: 5
};

const client = new Client({ intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMessages,
    IntentsBitField.Flags.MessageContent,
    IntentsBitField.Flags.DirectMessages
] });

let blacklist = [], donationHistory = [];
const userBanCounts = new Map();

setInterval(() => {
    userBanCounts.clear();
    console.log('[SYSTEM] ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}, 24 * 60 * 60 * 1000);

client.once('ready', async () => {
    console.log(`[SYSTEM] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${client.user.tag} (${new Date().toLocaleString('th-TH')})`);
    console.log('[SYSTEM] SteamThailand Bot ‡πÇ‡∏î‡∏¢ xeno (‡∏£‡∏¥‡∏ô) | ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏¢ | ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏®‡∏∂‡∏Å‡∏©‡∏≤ / ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');

    const data = await loadData();
    blacklist = data.blacklist || [];
    donationHistory = data.donationHistory || [];
    console.log('[SYSTEM] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    await registerCommands(client);
    console.log('[SYSTEM] ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
});

client.on('interactionCreate', async interaction => {
    try {
        if (!interaction.isCommand() && !interaction.isStringSelectMenu() && !interaction.isButton()) return;
        const userId = interaction.user.id;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
        if (interaction.isCommand()) {
            const { commandName, options, member } = interaction;
            await interaction.deferReply({ ephemeral: true });
            console.log(`[COMMAND] ${interaction.user.tag} ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /${commandName}`);

            // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á setup
            if (commandName === 'setup') {
                if (!member.roles.cache.has(config.adminRoleId)) return interaction.editReply({ content: '‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!' });
                const subcommand = options.getSubcommand();

                if (subcommand === 'donate') {
                    const recipient = sanitizeInput(options.getString('recipient'));
                    const tradeLink = sanitizeInput(options.getString('tradelink'));
                    if (!recipient || !tradeLink || !isValidTradeLink(tradeLink)) return interaction.editReply({ content: '‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå trade ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
                    config.tradeOfferLinks[recipient] = { link: tradeLink, emoji: 'üéÅ' };
                    const embed = createEmbed('donate', 'success', { recipient, link: tradeLink });
                    await logToChannel(client, config.logChannelId, embed);
                    await interaction.user.send({ embeds: [embed] }).catch(() => {});
                    return interaction.editReply({ content: '‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
                }

                if (subcommand === 'removedonate') {
                    const recipient = sanitizeInput(options.getString('recipient'));
                    if (!config.tradeOfferLinks[recipient]) return interaction.editReply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ${recipient}` });
                    delete config.tradeOfferLinks[recipient];
                    const embed = createEmbed('removedonate', 'success', { recipient });
                    await logToChannel(client, config.logChannelId, embed);
                    await interaction.user.send({ embeds: [embed] }).catch(() => {});
                    return interaction.editReply({ content: `‚úÖ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ ${recipient} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!` });
                }
            }

            // blacklist, check, donate, history, donationhistory
            // (...‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...)

        } else if (interaction.isStringSelectMenu() && interaction.customId === 'donate_select') {
            await interaction.deferUpdate();
            const recipient = interaction.values[0];
            const data = config.tradeOfferLinks[recipient];
            if (!data) return interaction.editReply({ content: '‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', components: [] });

            const embed = createEmbed('donate', 'success', { recipient, link: data.link, emoji: data.emoji });
            await interaction.user.send({ embeds: [embed] }).catch(() => {});
            await interaction.editReply({ content: '‚úÖ ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á DM ‡πÅ‡∏•‡πâ‡∏ß', embeds: [], components: [] });
            await logToChannel(client, config.logChannelId, createEmbed('donationlog', 'success', { userTag: interaction.user.tag, recipient }));
            donationHistory.push({ userId, username: interaction.user.tag, recipient, timestamp: Date.now() });
            await saveData({ blacklist, donationHistory });

        } else if (interaction.isButton()) {
            await interaction.deferUpdate();
            // (...‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡∏∏‡πà‡∏° ban/unban ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°...)
        }

    } catch (error) {
        console.error('[ERROR] ‡πÉ‡∏ô interactionCreate:', error);
        if (interaction.deferred || interaction.replied) {
            await interaction.editReply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' }).catch(() => {});
        } else {
            await interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', ephemeral: true }).catch(() => {});
        }
    }
});

process.on('uncaughtException', err => console.error('[FATAL] uncaughtException:', err));
process.on('unhandledRejection', err => console.error('[FATAL] unhandledRejection:', err));

client.login(config.discordToken).catch(err => console.error('[ERROR] ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err));
